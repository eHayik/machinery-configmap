buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'ru.vyarus.pom' version '2.1.0'
    id 'org.springframework.boot' version "${springBoot}"
    id 'io.spring.dependency-management' version "${dependencyManagement}"
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'pl.allegro.tech.build.axion-release' version '1.13.2'
}

sourceCompatibility = '11'

googleJavaFormat {
    options style: 'AOSP'
}

compileJava.dependsOn 'googleJavaFormat'

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

project.version = scmVersion.version

subprojects {

    group = 'com.github.eljaiek.machinery'
    version = rootProject.version

    repositories {
        mavenCentral()
    }

    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'ru.vyarus.pom'
    apply from: "$rootDir/gradle/ext/publish-common.gradle"

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testImplementation(platform("org.junit:junit-bom:${junit}"))
    }

    test {
        useJUnitPlatform()
    }

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }

    java {
        withSourcesJar()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom { x -> pom(x) }
            }
        }

        repositories {
            maven { x -> nexusRepository(x) }
        }
    }
}

file("machinery-configmap-repositories").eachDir { x ->
    project(":${x.name}") {
        dependencies {
            implementation project(':machinery-configmap-core')
            implementation "org.eclipse.collections:eclipse-collections:${eclipseCollectionsApi}"
            implementation "org.eclipse.collections:eclipse-collections-api:${eclipseCollectionsApi}"

            testImplementation 'org.junit.jupiter:junit-jupiter'
            testImplementation "org.assertj:assertj-core:${assertjCore}"
            testImplementation 'org.springframework.boot:spring-boot-starter-test'
        }
    }
}

bootJar {
    enabled = false
}