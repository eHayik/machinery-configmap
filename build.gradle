
buildscript {
    repositories {
        mavenCentral()
        maven {
            url "http://localhost:8081/repository/machinery-releases"
        }
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
	id 'org.springframework.boot' version "${springBoot}"
	id 'io.spring.dependency-management' version "${dependencyManagement}"
    id 'com.github.sherter.google-java-format' version '0.9'
}

group = 'com.github.eljaiek.machinery'
version = '0.0.1'
sourceCompatibility = '15'
targetCompatibility = '15'

compileJava.dependsOn 'googleJavaFormat'

googleJavaFormat {
    exclude '.mvn/wrapper/MavenWrapperDownloader.java'
}

repositories {
    mavenCentral()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

subprojects {

    repositories {
        mavenCentral()
    }

    if (it.name != 'machinery-config-dependencies') {

        apply plugin: 'java-library'
        apply plugin: 'org.springframework.boot'
        apply plugin: 'io.spring.dependency-management'

        dependencies {
            compileOnly 'org.projectlombok:lombok'
            annotationProcessor 'org.projectlombok:lombok'

            testCompileOnly 'org.projectlombok:lombok'
            testAnnotationProcessor 'org.projectlombok:lombok'
            testImplementation(platform("org.junit:junit-bom:${junit}"))
        }

        test {
            useJUnitPlatform()
        }

        bootJar {
            enabled = false
        }

        jar {
            enabled = true
        }
    }
}

file("machinery-config-repositories").eachDir {x ->
    project(":${x.name}") {
        dependencies {
            implementation project(':machinery-config-core')
            implementation "org.eclipse.collections:eclipse-collections:${eclipseCollectionsApi}"
            implementation "org.eclipse.collections:eclipse-collections-api:${eclipseCollectionsApi}"

            testImplementation 'org.junit.jupiter:junit-jupiter'
            testImplementation "org.assertj:assertj-core:${assertjCore}"
            testImplementation 'org.springframework.boot:spring-boot-starter-test'
        }
    }
}

bootJar {
	enabled = false
}

java {
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'eljaiek'
                        name = 'Eduardo Eljaiek'
                        email = 'eduardo.eljaiek@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/eljaiek/machinery-config.git'
                    developerConnection = 'scm:git:git@github.com:eljaiek/machinery-config.git'
                    url = 'https://github.com/eljaiek/machinery-config'
                }
            }
        }
    }

    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? project.nexusSnapshotsUrl : project.nexusReleasesUrl
            credentials {
                username project.nexusUser
                password project.nexusPasswd

            }
        }
    }
}